// =============================================================================
// SCRIPT KI·ªÇM TH·ª¨ ROLE V√Ä MERGE BACKEND-ADMIN
// File: role-test-and-merge.js
// =============================================================================

const fs = require('fs');
const path = require('path');

// Try to load environment if available
try {
    require('dotenv').config();
} catch (err) {
    console.log('‚ö†Ô∏è  dotenv not available, using default config');
}

let dbConnection, User, Role;

// Try to load models if available  
try {
    const dbConfig = require('./config/database');
    dbConnection = dbConfig.dbConnection;
    User = require('./models/User');
    Role = require('./models/Role');
} catch (err) {
    console.log('‚ö†Ô∏è  Database models not available, running file system checks only');
}

// M√†u s·∫Øc cho console
const colors = {
    green: '\x1b[32m',
    red: '\x1b[31m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m',
    white: '\x1b[37m',
    reset: '\x1b[0m'
};

function log(message, color = 'white') {
    console.log(`${colors[color]}${message}${colors.reset}`);
}

async function checkBackendAdminFiles() {
    log('\n=== KI·ªÇM TRA FILES BACKEND-ADMIN ===', 'cyan');
    
    const backendAdminFiles = [
        'backend/controllers/userController.js',
        'backend/routes/user.js', 
        'backend/middleware/rbac.js',
        'backend/ADMIN_TEST_GUIDE.md'
    ];

    const existingFiles = [];
    const missingFiles = [];

    for (const file of backendAdminFiles) {
        const fullPath = path.join(process.cwd(), file);
        if (fs.existsSync(fullPath)) {
            existingFiles.push(file);
            log(`‚úÖ T√¨m th·∫•y: ${file}`, 'green');
        } else {
            missingFiles.push(file);
            log(`‚ùå Kh√¥ng t√¨m th·∫•y: ${file}`, 'red');
        }
    }

    return { existingFiles, missingFiles };
}

async function testRoleCreation() {
    log('\n=== TEST ROLE CREATION ===', 'cyan');
    
    try {
        // Clear existing roles
        await Role.deleteMany({});
        log('üßπ ƒê√£ x√≥a t·∫•t c·∫£ role c≈©', 'yellow');

        // Test 1: T·∫°o role h·ª£p l·ªá
        const adminRole = await Role.create({
            name: 'admin',
            description: 'Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng',
            permissions: [
                'read_users', 'write_users', 'delete_users', 
                'manage_roles', 'manage_system'
            ],
            isActive: true
        });
        log('‚úÖ T·∫°o admin role th√†nh c√¥ng', 'green');

        const moderatorRole = await Role.create({
            name: 'moderator',
            description: 'Ng∆∞·ªùi ki·ªÉm duy·ªát',
            permissions: ['read_users', 'write_users', 'read_posts', 'write_posts'],
            isActive: true
        });
        log('‚úÖ T·∫°o moderator role th√†nh c√¥ng', 'green');

        const userRole = await Role.create({
            name: 'user',
            description: 'Ng∆∞·ªùi d√πng th∆∞·ªùng',
            permissions: ['read_posts', 'write_posts'],
            isActive: true
        });
        log('‚úÖ T·∫°o user role th√†nh c√¥ng', 'green');

        // Test 2: Th·ª≠ t·∫°o role v·ªõi t√™n kh√¥ng h·ª£p l·ªá (ngo√†i enum)
        try {
            await Role.create({
                name: 'invalid_role_name',
                description: 'Role kh√¥ng h·ª£p l·ªá'
            });
            log('‚ùå FAILED: Role enum validation kh√¥ng ho·∫°t ƒë·ªông', 'red');
        } catch (error) {
            log('‚úÖ Role enum validation ho·∫°t ƒë·ªông ƒë√∫ng', 'green');
        }

        // Test 3: Ki·ªÉm tra timestamps
        const now = new Date();
        const createdTime = new Date(adminRole.createdAt);
        if (Math.abs(now - createdTime) < 10000) {
            log('‚úÖ Timestamps ho·∫°t ƒë·ªông ƒë√∫ng', 'green');
        } else {
            log('‚ùå Timestamps c√≥ v·∫•n ƒë·ªÅ', 'red');
        }

        return { adminRole, moderatorRole, userRole };
    } catch (error) {
        log(`‚ùå L·ªói test role: ${error.message}`, 'red');
        throw error;
    }
}

async function testRolePermissions(roles) {
    log('\n=== TEST ROLE PERMISSIONS ===', 'cyan');
    
    try {
        const { adminRole, moderatorRole, userRole } = roles;

        // Test admin permissions
        const adminPerms = adminRole.permissions;
        if (adminPerms.includes('manage_system') && adminPerms.includes('delete_users')) {
            log('‚úÖ Admin role c√≥ ƒë√∫ng permissions', 'green');
        } else {
            log('‚ùå Admin role permissions kh√¥ng ƒë√∫ng', 'red');
        }

        // Test user permissions (kh√¥ng c√≥ delete_users)
        const userPerms = userRole.permissions;
        if (!userPerms.includes('delete_users') && userPerms.includes('read_posts')) {
            log('‚úÖ User role c√≥ ƒë√∫ng permissions (h·∫°n ch·∫ø)', 'green');
        } else {
            log('‚ùå User role permissions kh√¥ng ƒë√∫ng', 'red');
        }

        // Test moderator permissions (trung gian)
        const modPerms = moderatorRole.permissions;
        if (modPerms.includes('write_users') && !modPerms.includes('manage_system')) {
            log('‚úÖ Moderator role c√≥ ƒë√∫ng permissions (trung gian)', 'green');
        } else {
            log('‚ùå Moderator role permissions kh√¥ng ƒë√∫ng', 'red');
        }

        return true;
    } catch (error) {
        log(`‚ùå L·ªói test permissions: ${error.message}`, 'red');
        return false;
    }
}

async function testRBACWithUsers(roles) {
    log('\n=== TEST RBAC V·ªöI USERS ===', 'cyan');
    
    try {
        const { adminRole, moderatorRole, userRole } = roles;

        // Clear existing users
        await User.deleteMany({});
        log('üßπ ƒê√£ x√≥a t·∫•t c·∫£ user c≈©', 'yellow');

        // T·∫°o users v·ªõi c√°c role kh√°c nhau
        const adminUser = await User.create({
            username: 'admin_test',
            email: 'admin_test@group4.com',
            password: 'admin123456',
            fullName: 'Admin Test User',
            role: adminRole._id,
            isActive: true,
            isVerified: true
        });
        log('‚úÖ T·∫°o admin user th√†nh c√¥ng', 'green');

        const modUser = await User.create({
            username: 'mod_test',
            email: 'mod_test@group4.com',
            password: 'mod123456',
            fullName: 'Moderator Test User',
            role: moderatorRole._id,
            isActive: true,
            isVerified: true
        });
        log('‚úÖ T·∫°o moderator user th√†nh c√¥ng', 'green');

        const normalUser = await User.create({
            username: 'user_test',
            email: 'user_test@group4.com',
            password: 'user123456',
            fullName: 'Normal Test User',
            role: userRole._id,
            isActive: true,
            isVerified: true
        });
        log('‚úÖ T·∫°o normal user th√†nh c√¥ng', 'green');

        // Test populate role
        const adminWithRole = await User.findById(adminUser._id).populate('role');
        if (adminWithRole.role && adminWithRole.role.name === 'admin') {
            log('‚úÖ Role populate ho·∫°t ƒë·ªông ƒë√∫ng', 'green');
        } else {
            log('‚ùå Role populate c√≥ v·∫•n ƒë·ªÅ', 'red');
        }

        // Test RBAC logic simulation
        function simulateRBACCheck(user, requiredPermission) {
            return user.role.permissions.includes(requiredPermission);
        }

        // Test admin can delete users
        if (simulateRBACCheck(adminWithRole, 'delete_users')) {
            log('‚úÖ Admin c√≥ quy·ªÅn delete_users', 'green');
        } else {
            log('‚ùå Admin kh√¥ng c√≥ quy·ªÅn delete_users', 'red');
        }

        // Test normal user cannot delete users
        const userWithRole = await User.findById(normalUser._id).populate('role');
        if (!simulateRBACCheck(userWithRole, 'delete_users')) {
            log('‚úÖ Normal user KH√îNG c√≥ quy·ªÅn delete_users (ƒë√∫ng)', 'green');
        } else {
            log('‚ùå Normal user c√≥ quy·ªÅn delete_users (sai)', 'red');
        }

        return { adminUser, modUser, normalUser };
    } catch (error) {
        log(`‚ùå L·ªói test RBAC: ${error.message}`, 'red');
        throw error;
    }
}

async function testRoleUpdates() {
    log('\n=== TEST ROLE UPDATES ===', 'cyan');
    
    try {
        // T√¨m role ƒë·ªÉ update
        const userRole = await Role.findOne({ name: 'user' });
        
        // Update permissions
        userRole.permissions.push('delete_posts');
        await userRole.save();
        
        // Verify update
        const updatedRole = await Role.findById(userRole._id);
        if (updatedRole.permissions.includes('delete_posts')) {
            log('‚úÖ Role update ho·∫°t ƒë·ªông ƒë√∫ng', 'green');
        } else {
            log('‚ùå Role update c√≥ v·∫•n ƒë·ªÅ', 'red');
        }

        // Test updatedAt timestamp
        if (updatedRole.updatedAt > updatedRole.createdAt) {
            log('‚úÖ UpdatedAt timestamp ho·∫°t ƒë·ªông ƒë√∫ng', 'green');
        } else {
            log('‚ùå UpdatedAt timestamp c√≥ v·∫•n ƒë·ªÅ', 'red');
        }

        return true;
    } catch (error) {
        log(`‚ùå L·ªói test role updates: ${error.message}`, 'red');
        return false;
    }
}

function generateMergeInstructions() {
    log('\n=== H∆Ø·ªöNG D·∫™N MERGE BACKEND-ADMIN ===', 'cyan');
    
    log('\nüìã C√°c b∆∞·ªõc th·ª±c hi·ªán:', 'yellow');
    log('1. M·ªü CMD ho·∫∑c Git Bash m·ªõi (tr√°nh PowerShell b·ªã l·ªói)', 'white');
    log('2. Ch·∫°y c√°c l·ªánh sau:', 'white');
    
    log('\n# Fetch latest changes t·ª´ remote', 'magenta');
    log('git fetch --all', 'white');
    
    log('\n# Xem t·∫•t c·∫£ branches available', 'magenta');
    log('git branch -a', 'white');
    
    log('\n# Switch sang backend-admin branch (n·∫øu c√≥)', 'magenta');
    log('git checkout backend-admin', 'white');
    
    log('\n# Ho·∫∑c fetch backend-admin t·ª´ remote (n·∫øu ch∆∞a c√≥ local)', 'magenta');
    log('git checkout -b backend-admin origin/backend-admin', 'white');
    
    log('\n# Ki·ªÉm tra changes trong backend-admin', 'magenta');
    log('git diff main..backend-admin --name-only', 'white');
    
    log('\n# Switch v·ªÅ main ƒë·ªÉ merge', 'magenta');
    log('git checkout main', 'white');
    
    log('\n# Merge backend-admin v√†o main', 'magenta');
    log('git merge backend-admin', 'white');
    
    log('\n# Push changes l√™n remote', 'magenta');
    log('git push origin main', 'white');
    
    log('\nüö® L∆∞u √Ω quan tr·ªçng:', 'red');
    log('- Backup project tr∆∞·ªõc khi merge', 'yellow');
    log('- Ki·ªÉm tra conflicts v√† resolve c·∫©n th·∫≠n', 'yellow');
    log('- Test l·∫°i to√†n b·ªô system sau khi merge', 'yellow');
}

async function generatePostMergeTests() {
    log('\n=== TESTS SAU KHI MERGE ===', 'cyan');
    
    const testCommands = [
        'npm install',
        'npm run test:schema', 
        'npm run test:rbac',
        'npm start'
    ];

    log('\nüìã Ch·∫°y c√°c l·ªánh test sau khi merge:', 'yellow');
    testCommands.forEach((cmd, index) => {
        log(`${index + 1}. ${cmd}`, 'white');
    });

    log('\nüìã API endpoints c·∫ßn test v·ªõi Postman:', 'yellow');
    const endpoints = [
        'GET /users (Admin only)',
        'POST /users (Admin only)', 
        'PUT /users/:id (Admin only)',
        'DELETE /users/:id (Admin only)',
        'GET /roles',
        'POST /roles',
        'PUT /roles/:id'
    ];

    endpoints.forEach((endpoint, index) => {
        log(`${index + 1}. ${endpoint}`, 'white');
    });
}

async function main() {
    try {
        log('üöÄ B·∫ÆT ƒê·∫¶U KI·ªÇM TH·ª¨ ROLE V√Ä CHU·∫®N B·ªä MERGE BACKEND-ADMIN', 'cyan');
        
        // 1. Ki·ªÉm tra backend-admin files tr∆∞·ªõc
        const fileCheck = await checkBackendAdminFiles();
        
        // 2. Ki·ªÉm tra xem c√≥ th·ªÉ k·∫øt n·ªëi database kh√¥ng
        if (dbConnection && User && Role) {
            try {
                await dbConnection.connect();
                log('‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng', 'green');

                // 3. Test Role functionality n·∫øu c√≥ database
                const roles = await testRoleCreation();
                await testRolePermissions(roles);
                await testRBACWithUsers(roles);
                await testRoleUpdates();

                log('\nüéâ T·∫§T C·∫¢ TESTS ROLE ƒê·ªÄU PASS!', 'green');
                log('\nüìä K·∫æT QU·∫¢ KI·ªÇM TH·ª¨:', 'cyan');
                log('‚úÖ Role schema validation', 'green');
                log('‚úÖ Role permissions system', 'green');
                log('‚úÖ RBAC (Role-Based Access Control)', 'green');
                log('‚úÖ Role CRUD operations', 'green');
                log('‚úÖ User-Role associations', 'green');
                log('‚úÖ Timestamps & updates', 'green');
            } catch (dbError) {
                log(`‚ö†Ô∏è  Database kh√¥ng c√≥ s·∫µn: ${dbError.message}`, 'yellow');
                log('üîß Ti·∫øp t·ª•c v·ªõi file system checks...', 'cyan');
            }
        } else {
            log('‚ö†Ô∏è  Models kh√¥ng c√≥ s·∫µn, ch·ªâ check file system', 'yellow');
        }

        // 4. Generate merge instructions
        generateMergeInstructions();
        generatePostMergeTests();

        if (fileCheck.existingFiles.length > 0) {
            log('\nüìÅ Backend-admin files ƒë√£ s·∫µn s√†ng ƒë·ªÉ merge:', 'yellow');
            fileCheck.existingFiles.forEach(file => {
                log(`  - ${file}`, 'white');
            });
        }

        if (fileCheck.missingFiles.length > 0) {
            log('\n‚ö†Ô∏è  M·ªôt s·ªë files backend-admin ch∆∞a c√≥:', 'yellow');
            fileCheck.missingFiles.forEach(file => {
                log(`  - ${file}`, 'white');
            });
        }

        log('\nüîß S·∫µn s√†ng ƒë·ªÉ merge backend-admin v√†o main branch!', 'green');

    } catch (error) {
        log(`‚ùå L·ªñI TRONG QU√Å TR√åNH TEST: ${error.message}`, 'red');
        console.error(error);
    } finally {
        if (dbConnection) {
            log('\nüí° Database connection v·∫´n m·ªü ƒë·ªÉ ti·∫øp t·ª•c development...', 'cyan');
        } else {
            log('\nüí° Setup database ƒë·ªÉ ch·∫°y full tests sau khi merge...', 'cyan');
        }
    }
}

// Ch·∫°y test n·∫øu file n√†y ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
    main();
}

module.exports = { 
    testRoleCreation,
    testRolePermissions, 
    testRBACWithUsers,
    testRoleUpdates,
    checkBackendAdminFiles
};