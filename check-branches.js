// =============================================================================
// SCRIPT KI·ªÇM TRA GIT STATUS V√Ä BRANCHES
// File: check-branches.js
// =============================================================================

const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

const colors = {
    green: '\x1b[32m',
    red: '\x1b[31m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    cyan: '\x1b[36m',
    white: '\x1b[37m',
    reset: '\x1b[0m'
};

function log(message, color = 'white') {
    console.log(`${colors[color]}${message}${colors.reset}`);
}

function execPromise(command) {
    return new Promise((resolve, reject) => {
        exec(command, { cwd: process.cwd() }, (error, stdout, stderr) => {
            if (error) {
                reject({ error, stdout, stderr });
            } else {
                resolve({ stdout, stderr });
            }
        });
    });
}

async function checkGitStatus() {
    log('\n=== KI·ªÇM TRA GIT STATUS ===', 'cyan');
    
    try {
        // Check if this is a git repository
        const gitDir = path.join(process.cwd(), '.git');
        if (!fs.existsSync(gitDir)) {
            log('‚ùå Kh√¥ng ph·∫£i Git repository', 'red');
            return false;
        }
        log('‚úÖ ƒê√¢y l√† Git repository', 'green');

        // Check current branch
        try {
            const { stdout: currentBranch } = await execPromise('git branch --show-current');
            log(`üìç Current branch: ${currentBranch.trim()}`, 'yellow');
        } catch (err) {
            log('‚ö†Ô∏è  Kh√¥ng th·ªÉ x√°c ƒë·ªãnh current branch', 'yellow');
        }

        // Check git status
        try {
            const { stdout: status } = await execPromise('git status --porcelain');
            if (status.trim()) {
                log('üìù C√≥ uncommitted changes:', 'yellow');
                console.log(status);
            } else {
                log('‚úÖ Working directory clean', 'green');
            }
        } catch (err) {
            log('‚ö†Ô∏è  Kh√¥ng th·ªÉ ki·ªÉm tra git status', 'yellow');
        }

        return true;
    } catch (error) {
        log(`‚ùå L·ªói ki·ªÉm tra git: ${error.message}`, 'red');
        return false;
    }
}

async function listAllBranches() {
    log('\n=== KI·ªÇM TRA BRANCHES ===', 'cyan');
    
    try {
        // List local branches
        try {
            const { stdout: localBranches } = await execPromise('git branch');
            log('üìã Local branches:', 'yellow');
            console.log(localBranches);
        } catch (err) {
            log('‚ö†Ô∏è  Kh√¥ng th·ªÉ list local branches', 'yellow');
        }

        // Try to fetch remote branches
        try {
            log('üîÑ ƒêang fetch remote branches...', 'cyan');
            await execPromise('git fetch --all');
            log('‚úÖ Fetch remote th√†nh c√¥ng', 'green');
        } catch (err) {
            log('‚ö†Ô∏è  Kh√¥ng th·ªÉ fetch remote branches', 'yellow');
        }

        // List all branches including remote
        try {
            const { stdout: allBranches } = await execPromise('git branch -a');
            log('üìã T·∫•t c·∫£ branches (local + remote):', 'yellow');
            console.log(allBranches);
            
            // Check if backend-admin exists
            if (allBranches.includes('backend-admin')) {
                log('‚úÖ T√¨m th·∫•y backend-admin branch!', 'green');
                return { hasBackendAdmin: true, branches: allBranches };
            } else {
                log('‚ùå Kh√¥ng t√¨m th·∫•y backend-admin branch', 'red');
                return { hasBackendAdmin: false, branches: allBranches };
            }
        } catch (err) {
            log('‚ö†Ô∏è  Kh√¥ng th·ªÉ list all branches', 'yellow');
            return { hasBackendAdmin: false, branches: '' };
        }

    } catch (error) {
        log(`‚ùå L·ªói ki·ªÉm tra branches: ${error.message}`, 'red');
        return { hasBackendAdmin: false, branches: '' };
    }
}

async function checkBackendAdminContent() {
    log('\n=== KI·ªÇM TRA N·ªòI DUNG BACKEND-ADMIN ===', 'cyan');
    
    try {
        // Check if we can see backend-admin differences
        const { stdout: diff } = await execPromise('git diff main origin/backend-admin --name-only');
        if (diff.trim()) {
            log('üìù Files kh√°c nhau gi·ªØa main v√† backend-admin:', 'yellow');
            console.log(diff);
        } else {
            log('‚ÑπÔ∏è  Kh√¥ng c√≥ differences ho·∫∑c backend-admin kh√¥ng t·ªìn t·∫°i', 'blue');
        }
    } catch (err) {
        log('‚ö†Ô∏è  Kh√¥ng th·ªÉ ki·ªÉm tra diff v·ªõi backend-admin', 'yellow');
        
        // Try alternative method - check remote branches
        try {
            const { stdout: remotes } = await execPromise('git remote -v');
            log('üì° Remote repositories:', 'yellow');
            console.log(remotes);
        } catch (remoteErr) {
            log('‚ö†Ô∏è  Kh√¥ng th·ªÉ ki·ªÉm tra remotes', 'yellow');
        }
    }
}

async function generateMergeStrategy(branchInfo) {
    log('\n=== CHI·∫æN L∆Ø·ª¢C MERGE ===', 'cyan');
    
    if (branchInfo.hasBackendAdmin) {
        log('üéØ Backend-admin branch c√≥ s·∫µn - C√≥ th·ªÉ merge ngay:', 'green');
        log('\nüìã C√°c b∆∞·ªõc merge:', 'yellow');
        log('1. git checkout main', 'white');
        log('2. git pull origin main  # ƒê·∫£m b·∫£o main m·ªõi nh·∫•t', 'white');
        log('3. git merge backend-admin', 'white');
        log('4. # Resolve conflicts n·∫øu c√≥', 'white');
        log('5. git push origin main', 'white');
    } else {
        log('‚ö†Ô∏è  Backend-admin branch kh√¥ng c√≥ s·∫µn:', 'yellow');
        log('\nüîç C·∫ßn ki·ªÉm tra:', 'yellow');
        log('1. Branch c√≥ t·ªìn t·∫°i tr√™n remote kh√¥ng?', 'white');
        log('2. T√™n branch c√≥ ƒë√∫ng kh√¥ng? (c√≥ th·ªÉ l√† admin-backend, backend_admin, etc.)', 'white');
        log('3. C√≥ c·∫ßn t·∫°o branch m·ªõi kh√¥ng?', 'white');
        
        log('\nüõ†Ô∏è  C√°c options:', 'cyan');
        log('Option 1: T√¨m branch v·ªõi t√™n kh√°c:', 'white');
        log('  git branch -a | grep -i admin', 'white');
        log('  git branch -a | grep -i backend', 'white');
        
        log('\nOption 2: T·∫°o backend-admin branch m·ªõi:', 'white');
        log('  git checkout -b backend-admin', 'white');
        log('  # Add admin features', 'white');
        log('  git push origin backend-admin', 'white');
        
        log('\nOption 3: Merge t·ª´ remote branch kh√°c:', 'white');
        log('  git checkout main', 'white');
        log('  git merge origin/<t√™n-branch-th·ª±c-t·∫ø>', 'white');
    }
}

async function createBackupScript() {
    log('\n=== T·∫†O BACKUP SCRIPT ===', 'cyan');
    
    const backupScript = `@echo off
REM =============================================================================
REM BACKUP SCRIPT TR∆Ø·ªöC KHI MERGE
REM =============================================================================

echo üõ°Ô∏è  CREATING BACKUP BEFORE MERGE...

REM T·∫°o backup folder v·ªõi timestamp
set timestamp=%date:~-4,4%%date:~-10,2%%date:~-7,2%_%time:~0,2%%time:~3,2%%time:~6,2%
set timestamp=%timestamp: =0%
set backupDir=backup_before_merge_%timestamp%

echo üìÅ Creating backup directory: %backupDir%
mkdir %backupDir%

REM Copy to√†n b·ªô project (tr·ª´ node_modules v√† .git)
echo üìÑ Copying project files...
xcopy /E /I /H /Y . %backupDir% /EXCLUDE:backup_exclude.txt

REM T·∫°o file exclude ƒë·ªÉ b·ªè qua node_modules, .git, backups
echo node_modules\\ > backup_exclude.txt
echo .git\\ >> backup_exclude.txt
echo backup_*\\ >> backup_exclude.txt

echo ‚úÖ Backup completed in: %backupDir%
echo ‚ö†Ô∏è  Restore command: xcopy /E /I /H /Y %backupDir%\\* .
pause
`;

    fs.writeFileSync(path.join(process.cwd(), 'create_backup.bat'), backupScript);
    log('‚úÖ ƒê√£ t·∫°o create_backup.bat script', 'green');
    log('üí° Ch·∫°y create_backup.bat tr∆∞·ªõc khi merge ƒë·ªÉ backup project', 'cyan');
}

async function main() {
    try {
        log('üîç KI·ªÇM TRA TR·∫†NG TH√ÅI GIT V√Ä CHU·∫®N B·ªä MERGE', 'cyan');
        
        const isGitRepo = await checkGitStatus();
        if (!isGitRepo) {
            log('\n‚ùå Kh√¥ng th·ªÉ ti·∫øp t·ª•c - Kh√¥ng ph·∫£i Git repository', 'red');
            return;
        }

        const branchInfo = await listAllBranches();
        await checkBackendAdminContent();
        await generateMergeStrategy(branchInfo);
        await createBackupScript();

        log('\nüìä K·∫æT QU·∫¢ KI·ªÇM TRA:', 'cyan');
        log(`- Git Repository: ‚úÖ`, 'green');
        log(`- Backend-admin branch: ${branchInfo.hasBackendAdmin ? '‚úÖ' : '‚ùå'}`, 
            branchInfo.hasBackendAdmin ? 'green' : 'red');
        log(`- Backup script: ‚úÖ`, 'green');

        log('\nüöÄ S·∫¥N S√ÄNG CHO MERGE!', 'green');
        if (branchInfo.hasBackendAdmin) {
            log('üí° C√≥ th·ªÉ ti·∫øn h√†nh merge ngay theo h∆∞·ªõng d·∫´n tr√™n', 'cyan');
        } else {
            log('üí° C·∫ßn t√¨m hi·ªÉu th√™m v·ªÅ backend-admin branch', 'yellow');
        }

    } catch (error) {
        log(`‚ùå L·ªñI: ${error.message}`, 'red');
        console.error(error);
    }
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
    main();
}

module.exports = { 
    checkGitStatus,
    listAllBranches,
    checkBackendAdminContent,
    generateMergeStrategy
};