// =============================================================================
// EMAIL SERVICE CONFIGURATION
// File: config/emailService.js
// =============================================================================

const nodemailer = require('nodemailer');
require('dotenv').config();

// C·∫•u h√¨nh transporter cho Gmail (c√≥ th·ªÉ thay ƒë·ªïi provider)
const createTransporter = () => {
    return nodemailer.createTransporter({
        service: 'gmail',
        auth: {
            user: process.env.EMAIL_USER || 'group4project@gmail.com',
            pass: process.env.EMAIL_PASS || 'your-app-password'
        },
        // Ho·∫∑c s·ª≠ d·ª•ng SMTP settings kh√°c
        // host: process.env.SMTP_HOST || 'smtp.gmail.com',
        // port: process.env.SMTP_PORT || 587,
        // secure: false, // true for 465, false for other ports
    });
};

/**
 * G·ª≠i email reset password
 * @param {string} email - Email ng∆∞·ªùi nh·∫≠n
 * @param {string} resetToken - Reset token
 * @param {string} userName - T√™n ng∆∞·ªùi d√πng
 * @returns {Promise<Object>} - Send result
 */
const sendResetPasswordEmail = async (email, resetToken, userName = 'User') => {
    try {
        const transporter = createTransporter();
        
        // URL reset password (c√≥ th·ªÉ customize)
        const resetUrl = `${process.env.FRONTEND_URL || 'http://localhost:3000'}/reset-password?token=${resetToken}`;
        
        const mailOptions = {
            from: {
                name: 'Group 4 Project',
                address: process.env.EMAIL_USER || 'group4project@gmail.com'
            },
            to: email,
            subject: 'üîê ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - Group 4 Project',
            html: generateResetPasswordHTML(userName, resetUrl, resetToken),
            text: generateResetPasswordText(userName, resetUrl, resetToken)
        };

        const result = await transporter.sendMail(mailOptions);
        console.log('Reset password email sent successfully:', result.messageId);
        
        return {
            success: true,
            messageId: result.messageId,
            message: 'Email reset password ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng'
        };
    } catch (error) {
        console.error('Error sending reset password email:', error);
        throw new Error('Kh√¥ng th·ªÉ g·ª≠i email reset password: ' + error.message);
    }
};

/**
 * G·ª≠i email x√°c th·ª±c t√†i kho·∫£n
 * @param {string} email - Email ng∆∞·ªùi nh·∫≠n
 * @param {string} verificationToken - Verification token
 * @param {string} userName - T√™n ng∆∞·ªùi d√πng
 * @returns {Promise<Object>} - Send result
 */
const sendVerificationEmail = async (email, verificationToken, userName = 'User') => {
    try {
        const transporter = createTransporter();
        
        const verificationUrl = `${process.env.FRONTEND_URL || 'http://localhost:3000'}/verify-email?token=${verificationToken}`;
        
        const mailOptions = {
            from: {
                name: 'Group 4 Project',
                address: process.env.EMAIL_USER || 'group4project@gmail.com'
            },
            to: email,
            subject: '‚úÖ X√°c th·ª±c t√†i kho·∫£n - Group 4 Project',
            html: generateVerificationHTML(userName, verificationUrl, verificationToken),
            text: generateVerificationText(userName, verificationUrl, verificationToken)
        };

        const result = await transporter.sendMail(mailOptions);
        console.log('Verification email sent successfully:', result.messageId);
        
        return {
            success: true,
            messageId: result.messageId,
            message: 'Email x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng'
        };
    } catch (error) {
        console.error('Error sending verification email:', error);
        throw new Error('Kh√¥ng th·ªÉ g·ª≠i email x√°c th·ª±c: ' + error.message);
    }
};

/**
 * G·ª≠i email th√¥ng b√°o chung
 * @param {string} email - Email ng∆∞·ªùi nh·∫≠n
 * @param {string} subject - Ti√™u ƒë·ªÅ email
 * @param {string} message - N·ªôi dung
 * @param {string} userName - T√™n ng∆∞·ªùi d√πng
 * @returns {Promise<Object>} - Send result
 */
const sendNotificationEmail = async (email, subject, message, userName = 'User') => {
    try {
        const transporter = createTransporter();
        
        const mailOptions = {
            from: {
                name: 'Group 4 Project',
                address: process.env.EMAIL_USER || 'group4project@gmail.com'
            },
            to: email,
            subject: `üì¢ ${subject} - Group 4 Project`,
            html: generateNotificationHTML(userName, subject, message),
            text: `Xin ch√†o ${userName},\n\n${message}\n\nTr√¢n tr·ªçng,\nGroup 4 Project Team`
        };

        const result = await transporter.sendMail(mailOptions);
        console.log('Notification email sent successfully:', result.messageId);
        
        return {
            success: true,
            messageId: result.messageId,
            message: 'Email th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng'
        };
    } catch (error) {
        console.error('Error sending notification email:', error);
        throw new Error('Kh√¥ng th·ªÉ g·ª≠i email th√¥ng b√°o: ' + error.message);
    }
};

/**
 * Test email connection
 * @returns {Promise<boolean>} - Connection test result
 */
const testEmailConnection = async () => {
    try {
        const transporter = createTransporter();
        await transporter.verify();
        console.log('Email service connection successful');
        return true;
    } catch (error) {
        console.error('Email service connection failed:', error);
        return false;
    }
};

// =============================================================================
// HTML EMAIL TEMPLATES
// =============================================================================

const generateResetPasswordHTML = (userName, resetUrl, resetToken) => {
    return `
    <!DOCTYPE html>
    <html lang="vi">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</title>
        <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
            .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
            .button { display: inline-block; background: #667eea; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; margin: 20px 0; }
            .button:hover { background: #5a67d8; }
            .token-box { background: #e2e8f0; padding: 15px; border-radius: 5px; margin: 15px 0; font-family: monospace; word-break: break-all; }
            .warning { background: #fed7d7; color: #c53030; padding: 15px; border-radius: 5px; margin: 15px 0; }
            .footer { text-align: center; margin-top: 20px; color: #666; font-size: 12px; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üîê ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h1>
                <p>Group 4 Project - User Management System</p>
            </div>
            <div class="content">
                <h2>Xin ch√†o ${userName}!</h2>
                <p>Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n.</p>
                
                <p>ƒê·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng click v√†o n√∫t b√™n d∆∞·ªõi:</p>
                <div style="text-align: center;">
                    <a href="${resetUrl}" class="button">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</a>
                </div>
                
                <p>Ho·∫∑c copy v√† paste link sau v√†o tr√¨nh duy·ªát:</p>
                <div class="token-box">
                    ${resetUrl}
                </div>
                
                <p>M√£ x√°c th·ª±c c·ªßa b·∫°n:</p>
                <div class="token-box">
                    ${resetToken}
                </div>
                
                <div class="warning">
                    <strong>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</strong><br>
                    ‚Ä¢ Link n√†y ch·ªâ c√≥ hi·ªáu l·ª±c trong 15 ph√∫t<br>
                    ‚Ä¢ N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, h√£y b·ªè qua email n√†y<br>
                    ‚Ä¢ Kh√¥ng chia s·∫ª link ho·∫∑c m√£ n√†y v·ªõi ng∆∞·ªùi kh√°c
                </div>
                
                <p>N·∫øu b·∫°n g·∫∑p v·∫•n ƒë·ªÅ, h√£y li√™n h·ªá v·ªõi ch√∫ng t√¥i qua email h·ªó tr·ª£.</p>
                
                <p>Tr√¢n tr·ªçng,<br>
                <strong>Group 4 Project Team</strong></p>
            </div>
            <div class="footer">
                <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng Group 4 Project</p>
                <p>¬© 2024 Group 4 Project. All rights reserved.</p>
            </div>
        </div>
    </body>
    </html>
    `;
};

const generateVerificationHTML = (userName, verificationUrl, verificationToken) => {
    return `
    <!DOCTYPE html>
    <html lang="vi">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>X√°c th·ª±c t√†i kho·∫£n</title>
        <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background: linear-gradient(135deg, #48bb78 0%, #38a169 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
            .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
            .button { display: inline-block; background: #48bb78; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; margin: 20px 0; }
            .button:hover { background: #38a169; }
            .token-box { background: #e2e8f0; padding: 15px; border-radius: 5px; margin: 15px 0; font-family: monospace; word-break: break-all; }
            .footer { text-align: center; margin-top: 20px; color: #666; font-size: 12px; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>‚úÖ X√°c th·ª±c t√†i kho·∫£n</h1>
                <p>Ch√†o m·ª´ng ƒë·∫øn v·ªõi Group 4 Project!</p>
            </div>
            <div class="content">
                <h2>Xin ch√†o ${userName}!</h2>
                <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i Group 4 Project.</p>
                <p>ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω, vui l√≤ng x√°c th·ª±c email c·ªßa b·∫°n:</p>
                
                <div style="text-align: center;">
                    <a href="${verificationUrl}" class="button">X√°c th·ª±c t√†i kho·∫£n</a>
                </div>
                
                <p>Ho·∫∑c copy link sau v√†o tr√¨nh duy·ªát:</p>
                <div class="token-box">
                    ${verificationUrl}
                </div>
                
                <p>Sau khi x√°c th·ª±c th√†nh c√¥ng, b·∫°n s·∫Ω c√≥ th·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß c√°c t√≠nh nƒÉng c·ªßa h·ªá th·ªëng.</p>
                
                <p>Tr√¢n tr·ªçng,<br>
                <strong>Group 4 Project Team</strong></p>
            </div>
            <div class="footer">
                <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng Group 4 Project</p>
            </div>
        </div>
    </body>
    </html>
    `;
};

const generateNotificationHTML = (userName, subject, message) => {
    return `
    <!DOCTYPE html>
    <html lang="vi">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${subject}</title>
        <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background: linear-gradient(135deg, #4299e1 0%, #3182ce 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
            .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
            .footer { text-align: center; margin-top: 20px; color: #666; font-size: 12px; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üì¢ ${subject}</h1>
                <p>Group 4 Project</p>
            </div>
            <div class="content">
                <h2>Xin ch√†o ${userName}!</h2>
                <div>${message}</div>
                <p>Tr√¢n tr·ªçng,<br>
                <strong>Group 4 Project Team</strong></p>
            </div>
            <div class="footer">
                <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª´ h·ªá th·ªëng Group 4 Project</p>
            </div>
        </div>
    </body>
    </html>
    `;
};

// =============================================================================
// TEXT EMAIL TEMPLATES (fallback)
// =============================================================================

const generateResetPasswordText = (userName, resetUrl, resetToken) => {
    return `
ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - Group 4 Project

Xin ch√†o ${userName}!

Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n.

ƒê·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng truy c·∫≠p link sau:
${resetUrl}

M√£ x√°c th·ª±c: ${resetToken}

L∆ØU √ù QUAN TR·ªåNG:
- Link n√†y ch·ªâ c√≥ hi·ªáu l·ª±c trong 15 ph√∫t
- N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, h√£y b·ªè qua email n√†y
- Kh√¥ng chia s·∫ª link ho·∫∑c m√£ n√†y v·ªõi ng∆∞·ªùi kh√°c

Tr√¢n tr·ªçng,
Group 4 Project Team
    `;
};

const generateVerificationText = (userName, verificationUrl, verificationToken) => {
    return `
X√°c th·ª±c t√†i kho·∫£n - Group 4 Project

Xin ch√†o ${userName}!

C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i Group 4 Project.

ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω, vui l√≤ng truy c·∫≠p link sau ƒë·ªÉ x√°c th·ª±c email:
${verificationUrl}

Sau khi x√°c th·ª±c th√†nh c√¥ng, b·∫°n s·∫Ω c√≥ th·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß c√°c t√≠nh nƒÉng c·ªßa h·ªá th·ªëng.

Tr√¢n tr·ªçng,
Group 4 Project Team
    `;
};

module.exports = {
    sendResetPasswordEmail,
    sendVerificationEmail,
    sendNotificationEmail,
    testEmailConnection,
    createTransporter
};